using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;

namespace JsonDerivedTypeGenerator;

internal static class GeneratorHelpers
{
    private const string JsonPolymorphicAttributeName = "JsonPolymorphicAttribute";

    public static bool HasPolymorphicAttribute(
        INamedTypeSymbol symbol) =>
        symbol
            .GetAttributes()
            .Any(x => x.AttributeClass?.Name == JsonPolymorphicAttributeName);

    public static string CreateSourceOutput(
        KeyValuePair<INamedTypeSymbol, List<INamedTypeSymbol>> row)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// <auto-generated/>\n");
        sb.AppendLine("using System.Text.Json.Serialization;\n");
        sb.AppendLine($"namespace {row.Key.ContainingNamespace.ToDisplayString()};\n");
        foreach (var derivedType in row.Value)
        {
            sb.AppendLine($"[JsonDerivedType(typeof({derivedType.OriginalDefinition}), nameof({derivedType.ContainingNamespace + "." + derivedType.Name}))]");
        }
        sb.AppendLine($"{row.Key.GetModifiers()} partial {GetTypeDescriptor(row.Key)} {row.Key.Name} {{ }}");
        return sb.ToString();
    }

    private static string GetTypeDescriptor(INamedTypeSymbol symbol)
    {
        return symbol.TypeKind switch
        {
            TypeKind.Class => "class",
            TypeKind.Interface => "interface",
            _ => string.Empty
        };
    }
}
