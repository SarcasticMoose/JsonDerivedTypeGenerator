using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Xunit;

namespace JsonDerivedTypeGenerator.Tests;

public class JsonDerivedTypeGeneratorWithAttributesTests
{
    private const string VectorClassText = @"
using System.Text.Json.Serialization;

namespace JsonDerivedTypeGenerator.Sample;

[JsonPolymorphic]
public abstract partial class Animal
{
    public abstract void MakeNoise();
    public abstract string Kind { get; }
}
public class Cat : Animal
{
    public override void MakeNoise()
    {
        Console.WriteLine(""Meow"");
    }

    public override string Kind { get; }
}
public class Dog : Animal
{
    public override void MakeNoise()
    {
        Console.WriteLine(""Howl"");
    }

    public override string Kind { get; }
}
public class Duck : Animal
{
    public override void MakeNoise()
    {
        Console.WriteLine(""Quack"");
    }

    public override string Kind { get; }
}";

    private const string ExpectedGeneratedClassText = @"// <auto-generated/>

using System.Text.Json.Serialization;

namespace JsonDerivedTypeGenerator.Sample;

[JsonDerivedType(typeof(JsonDerivedTypeGenerator.Sample.Cat), nameof(JsonDerivedTypeGenerator.Sample.Cat))]
[JsonDerivedType(typeof(JsonDerivedTypeGenerator.Sample.Dog), nameof(JsonDerivedTypeGenerator.Sample.Dog))]
[JsonDerivedType(typeof(JsonDerivedTypeGenerator.Sample.Duck), nameof(JsonDerivedTypeGenerator.Sample.Duck))]
public abstract partial class Animal { }
";

    [Fact]
    public void GenerateReportMethod()
    {
        // Create an instance of the source generator.
        var generator = new DerivedTypesGenerator();

        // Source generators should be tested using 'GeneratorDriver'.
        var driver = CSharpGeneratorDriver.Create(generator);

        // We need to create a compilation with the required source code.
        var compilation = CSharpCompilation.Create(nameof(JsonDerivedTypeGeneratorWithAttributesTests),
            new[] { CSharpSyntaxTree.ParseText(VectorClassText) },
            new[]
            {
                MetadataReference.CreateFromFile(typeof(System.Text.Json.Serialization.JsonPolymorphicAttribute).Assembly.Location),
                MetadataReference.CreateFromFile(typeof(object).Assembly.Location)
            });

        // Run generators and retrieve all results.
        var runResult = driver.RunGenerators(compilation).GetRunResult();

        // All generated files can be found in 'RunResults.GeneratedTrees'.
        var generatedFileSyntax = runResult.GeneratedTrees.Single(t => t.FilePath.EndsWith("Animal_Animal.g.cs"));

        // Complex generators should be tested using text comparison.
        Assert.Equal(ExpectedGeneratedClassText, generatedFileSyntax.GetText().ToString(),
            ignoreLineEndingDifferences: true);
    }
}